<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tools.Math.TSP</name>
    </assembly>
    <members>
        <member name="T:Tools.Math.TravellingSalesman.Random.RandomSolver">
            <summary>
            Just generates random routes.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.ISolver">
            <summary>
            Interface representing a solver for the TSP.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.ISolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Solves the TSP.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.ISolver.Stop">
            <summary>
            Stops the executing of the solving process.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.ISolver.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="E:Tools.Math.TSP.ISolver.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="F:Tools.Math.TravellingSalesman.Random.RandomSolver._stopped">
            <summary>
            Boolean to stop execution.
            </summary>
        </member>
        <member name="F:Tools.Math.TravellingSalesman.Random.RandomSolver._route">
            <summary>
            The route this solver was initialized with.
            </summary>
        </member>
        <member name="M:Tools.Math.TravellingSalesman.Random.RandomSolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Generates a random route.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TravellingSalesman.Random.RandomSolver.DoSolve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Generates a random route.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TravellingSalesman.Random.RandomSolver.Stop">
            <summary>
            Stops execution.
            </summary>
        </member>
        <member name="P:Tools.Math.TravellingSalesman.Random.RandomSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.LK.LinKernighanSolver">
            <summary>
            A solver that use the Lin-Kernighan heuristic to solve instances of the TSP.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.LK.LinKernighanSolver.Replace(Tools.Math.VRP.Core.Routes.Symmetric.FixedSymmetricRoute,Tools.Math.TSP.LK.EdgeList,Tools.Math.TSP.LK.EdgeList)">
            <summary>
            Replaces some edges with a list of other edges.
            </summary>
            <param name="route"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.LK.LinKernighanSolver.SelectY(Tools.Math.TSP.Problems.IProblem,Tools.Math.VRP.Core.Routes.Symmetric.FixedSymmetricRoute,Tools.Math.TSP.LK.EdgeSet,Tools.Math.TSP.LK.EdgeSet,Tools.Math.TSP.LK.EdgeList,Tools.Math.TSP.LK.EdgeList,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Selects with special priority.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="exceptions"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.LK.LinKernighanSolver.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.LK.LinKernighanSolver.RaiseIntermidiateResult(System.Int32[],System.Double)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Tools.Math.TSP.LK.LinKernighanSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="E:Tools.Math.TSP.LK.LinKernighanSolver.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.Genetic.GeneticSolver">
            <summary>
            Solver that uses a Genetic Algorithm to solve instances of the TSP.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.GeneticSolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Solves the problem using a GA.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.GeneticSolver.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.GeneticSolver.RaiseIntermidiateResult(System.Int32[],System.Double)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.GeneticSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="E:Tools.Math.TSP.Genetic.GeneticSolver.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.SolverDelegates.IntermidiateDelegate">
            <summary>
            Delegate to pass on an intermidiate solution.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Tools.Math.TSP.IImprovement">
            <summary>
            Represents an improvement heuristic/solver.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.IImprovement.Improve(Tools.Math.VRP.Core.IProblemWeights,Tools.Math.VRP.Core.Routes.IRoute,System.Double@)">
            <summary>
            Returns true if there was an improvement.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Mutation.BestDetailedPlacementMutationOperation.MutateByTakingPiece(Tools.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness},Tools.Math.AI.Genetic.Individual{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Take a piece of the genome and re-do best placement.
            </summary>
            <param name="solver"></param>
            <param name="mutating"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Mutation.BestDetailedPlacementMutationOperation.MutateByRePlacement(Tools.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness},Tools.Math.AI.Genetic.Individual{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Re-places all the cities again to their own best place.
            </summary>
            <param name="solver"></param>
            <param name="mutating"></param>
            <returns></returns>
        </member>
        <member name="T:Tools.Math.TSP.Genetic.Solver.Operations.Generation.BestPlacementGenerationOperation">
            <summary>
            Generates a random individual.
            </summary>
            <typeparam name="GenomeType"></typeparam>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Generation.BestPlacementGenerationOperation.Generate(Tools.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Generates a random individual.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Generation._3OptGenerationOperation.Generate(Tools.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Generates a random individual.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="T:Tools.Math.TSP.Genetic.Solver.Operations.CrossOver.SequentialContructiveCrossoverOperator">
            <summary>
            Implements a version of the sequential constructive crossover operator.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver">
            <summary>
            Implements a best-placement solver.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver._stopped">
            <summary>
            Keeps the stopped flag.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver._customers">
            <summary>
            Keeps an orginal list of customers.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver._population_size">
            <summary>
            Holds the population size.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver._stagnation">
            <summary>
            Holds the stagnation count.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver._generation_operation">
            <summary>
            Holds a generation operation.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver._cross_over_operation">
            <summary>
            Holds a generation operation.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.#ctor(System.Int32,System.Int32,Tools.Math.AI.Genetic.Operations.Generation.IGenerationOperation{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness},Tools.Math.AI.Genetic.Operations.CrossOver.ICrossOverOperation{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Creates a new solver.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.#ctor(Tools.Math.TSP.Problems.IProblem,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates a new solver.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Returns a solution found using best-placement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.Stop">
            <summary>
            Stops executiong.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.RaiseIntermidiateResult(System.Int32[],System.Single)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="E:Tools.Math.TSP.EdgeAssemblyGenetic.EdgeAssemblyCrossOverSolver.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.Genetic.Solver.Operations.Generation.RandomGenerationOperation">
            <summary>
            Generates a random individual.
            </summary>
            <typeparam name="GenomeType"></typeparam>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Generation.RandomGenerationOperation.Generate(Tools.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Generates a random individual.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="T:Tools.Math.TSP.Genetic.Solver.GeneticProblem">
            <summary>
            Class acting as a wrapper for the problem implementing the IProblem interface.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.Genetic.Solver.GeneticProblem._problem">
            <summary>
            The non-genetic problem.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.GeneticProblem.#ctor(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Creates a new genetic problem.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.GeneticProblem.Weight(System.Int32,System.Int32)">
            <summary>
            Returns the weight between city1 and city2.
            </summary>
            <param name="city1"></param>
            <param name="city1"></param>
            <returns></returns>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.Solver.GeneticProblem.First">
            <summary>
            Returns the first customer in a round.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.Solver.GeneticProblem.Last">
            <summary>
            Returns the last customer in a round.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.Problems.IProblem">
            <summary>
            Interface representing a generic TSP-problem.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.IProblem.Size">
            <summary>
            Returns the size of the problem.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.IProblem.First">
            <summary>
            Returns the first customer.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.IProblem.Last">
            <summary>
            Returns the last customer.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.IProblem.Symmetric">
            <summary>
            Returns true if the problem is symmetric.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.IProblem.Euclidean">
            <summary>
            Returns true if the problem is euclidean.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.Convertor">
            <summary>
            Converts TSP problems and routes.
            </summary>
            <remarks>
            References: TRANSFORMING ASYMMETRIC INTO SYMMETRIC TRAVELING SALESMAN PROBLEMS
            Roy JONKER and Ton VOLGENANT (1983)
            </remarks>
        </member>
        <member name="M:Tools.Math.TSP.Convertor.ConvertToSymmetric(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Converts a symmetric to an asymmetric problem.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Convertor.AddVirtualDepot(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Adds a virtual depot with weight equal to zero to all customers.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Generation.LKGenerationOperation.Generate(Tools.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Generates a random individual.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="T:Tools.Math.TSP.Problems.MatrixProblem">
            <summary>
            A general TSP problem with it's weights in a matrix.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.Problems.MatrixProblem._symmetric">
            <summary>
            Hold the symmetric flag.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.Problems.MatrixProblem._euclidean">
            <summary>
            Holds the euclidean flag.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.Problems.MatrixProblem._weights">
            <summary>
            Holds the weights.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.Problems.MatrixProblem._first">
            <summary>
            Holds the first customer.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.Problems.MatrixProblem._last">
            <summary>
            Holds the last customer.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.Problems.MatrixProblem.#ctor(System.Double[][],System.Boolean)">
            <summary>
            Creates a new matrix problem.
            </summary>
            <param name="weights"></param>
            <param name="symmetric"></param>
        </member>
        <member name="M:Tools.Math.TSP.Problems.MatrixProblem.#ctor(System.Double[][],System.Boolean,System.Boolean)">
            <summary>
            Creates a new matrix problem.
            </summary>
            <param name="weights"></param>
            <param name="symmetric"></param>
        </member>
        <member name="M:Tools.Math.TSP.Problems.MatrixProblem.#ctor(System.Double[][],System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new matrix problem.
            </summary>
            <param name="weights"></param>
            <param name="symmetric"></param>
        </member>
        <member name="M:Tools.Math.TSP.Problems.MatrixProblem.#ctor(System.Double[][],System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new matrix problem.
            </summary>
            <param name="weights"></param>
            <param name="symmetric"></param>
        </member>
        <member name="M:Tools.Math.TSP.Problems.MatrixProblem.Weight(System.Int32,System.Int32)">
            <summary>
            Returns the weight between two customers.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:Tools.Math.TSP.Problems.MatrixProblem._neighbours">
            <summary>
            Keeps the nearest neighbour list.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.Problems.MatrixProblem.Get10NearestNeighbours(System.Int32)">
            <summary>
            Generate the nearest neighbour list.
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="P:Tools.Math.TSP.Problems.MatrixProblem.Symmetric">
            <summary>
            Returns true if the problem is symmetric.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.MatrixProblem.Euclidean">
            <summary>
            Returns true if the problem is euclidean.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.MatrixProblem.Size">
            <summary>
            Returns the size of the problem.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.MatrixProblem.First">
            <summary>
            Returns the first customer.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.MatrixProblem.Last">
            <summary>
            Returns the last customer.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Problems.MatrixProblem.WeightMatrix">
            <summary>
            Returns the actual weight matrix.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.Genetic.Solver.Operations.Mutation.DefaultMutationOperation">
            <summary>
            Class mutating individuals in two ways:
                - Switching two random nodes
                - Switch order between two random nodes.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Mutation.DefaultMutationOperation.Mutate(Tools.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness},Tools.Math.AI.Genetic.Individual{System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.Fitness})">
            <summary>
            Mutates an idividual.
            </summary>
            <param name="solver"></param>
            <param name="mutating"></param>
            <returns></returns>
        </member>
        <member name="F:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver._stopped">
            <summary>
            Keeps the stopped flag.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver._customers">
            <summary>
            Keeps an orginal list of customers.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.#ctor">
            <summary>
            Creates a new solver.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.#ctor(Tools.Math.TSP.Problems.IProblem,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates a new solver.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Returns a solution found using best-placement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.Stop">
            <summary>
            Stops executiong.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.RaiseIntermidiateResult(System.Int32[],System.Single)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="E:Tools.Math.TSP.CheapestInsertion.CheapestInsertionSolver.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver">
            <summary>
            Implements a best-placement solver.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver._stopped">
            <summary>
            Keeps the stopped flag.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver._customers">
            <summary>
            Keeps an orginal list of customers.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.#ctor">
            <summary>
            Creates a new solver.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates a new solver.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Returns a solution found using best-placement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.Improve(Tools.Math.VRP.Core.IProblemWeights,Tools.Math.VRP.Core.Routes.IRoute,System.Double@)">
            <summary>
            Tries to improve the existing route using CI and return true if succesful.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.InsertOne(Tools.Math.VRP.Core.IProblemWeights,Tools.Math.VRP.Core.Routes.IRoute,System.Int32,System.Double@)">
            <summary>
            Re-inserts a customer in the route.
            </summary>
            <param name="weights"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.Stop">
            <summary>
            Stops executiong.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.RaiseIntermidiateResult(System.Int32[],System.Single)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="E:Tools.Math.TSP.ArbitraryInsertion.ArbitraryInsertionSolver.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementHelper.Do(Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.FitnessCalculator,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Calculates and places this city in the least cost position.
            </summary>
            <param name="problem"></param>
            <param name="calculator"></param>
            <param name="genomes"></param>
            <param name="city_to_place"></param>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementHelper.Do(Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.FitnessCalculator,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates and places the given cities one by one in the least cost position.
            </summary>
            <param name="problem"></param>
            <param name="calculator"></param>
            <param name="genomes"></param>
            <param name="cities_to_place"></param>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementHelper.DoFast(Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.FitnessCalculator,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates and places the given cities by randomly selecting them and placing them into the least cost position.
            </summary>
            <param name="problem"></param>
            <param name="calculator"></param>
            <param name="genomes"></param>
            <param name="cities_to_place"></param>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementHelper.Do(System.Collections.Generic.List{System.Int32},Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementResult)">
            <summary>
            Applies the result to the genome.
            </summary>
            <param name="genomes"></param>
            <param name="result"></param>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementHelper.CalculateBestPlacement(Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.FitnessCalculator,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Searches for the best place to insert the given city.
            </summary>
            <param name="problem"></param>
            <param name="calculator"></param>
            <param name="genomes"></param>
            <param name="city_to_place"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementHelper.CalculateBestPlacement(Tools.Math.TSP.Genetic.Solver.GeneticProblem,Tools.Math.TSP.Genetic.Solver.FitnessCalculator,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Searches for the city that can be placed best with the least increase in cost.
            </summary>
            <param name="problem"></param>
            <param name="calculator"></param>
            <param name="genomes"></param>
            <param name="cities_to_place"></param>
            <returns></returns>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementResult.Increase">
            <summary>
            Gets/sets the increase in time.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementResult.Fitness">
            <summary>
            The fitness of the individual after best placement.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementResult.CityIdx">
            <summary>
            The index in the genome to place the city at.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.Solver.Operations.Helpers.BestPlacementResult.City">
            <summary>
            The city being placed.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver">
            <summary>
            Uses the 3-opt local search procedure to generate ATSP solutions.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver._stopped">
            <summary>
            Boolean to stop execution.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver._nearest_neighbours">
            <summary>
            Only check nearest neighbours.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver._dont_look">
            <summary>
            Use don't check flags.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver._route">
            <summary>
            The route this solver was initialized with.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver._epsilon">
            <summary>
            The minium difference to register improvement(s).
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new solver.
            </summary>
            <param name="nearest_neighbours"></param>
            <param name="dont_look"></param>
        </member>
        <member name="M:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Solves the problem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.Improve(Tools.Math.VRP.Core.IProblemWeights,Tools.Math.VRP.Core.Routes.IRoute,System.Double@)">
            <summary>
            Improves an existing solution.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="difference"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.Try3OptMoves(Tools.Math.VRP.Core.IProblemWeights,System.Double[][],Tools.Math.VRP.Core.Routes.IRoute,System.Int32)">
            <summary>
            Tries all 3Opt Moves for the neighbourhood of v_1.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="v_1"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.Try3OptMoves(Tools.Math.VRP.Core.IProblemWeights,System.Double[][],Tools.Math.VRP.Core.Routes.IRoute,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Tries all 3Opt Moves for the neighbourhood of v_1 containing v_3.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="v_1"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.Try3OptMoves(Tools.Math.VRP.Core.IProblemWeights,System.Double[][],Tools.Math.VRP.Core.Routes.IRoute,System.Int32,System.Int32,System.Int32,System.Double[],System.Int32,System.Double,System.Double)">
            <summary>
            Tries all 3Opt Moves for the neighbourhood of v_1 containing v_3.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="v_1"></param>
            <param name="v_2"></param>
            <param name="v_3"></param>
            <returns></returns>
        </member>
        <member name="F:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver._dont_look_bits">
            <summary>
            Holds all the don't look bits.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.Stop">
            <summary>
            Stops execution.
            </summary>
        </member>
        <member name="P:Tools.Math.TSP.LocalSearch.HillClimbing3Opt.HillClimbing3OptSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Individual.ToString">
            <summary>
            Returns a description of this individual.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.Genetic.Solver.Individual.Validate(Tools.Math.TSP.Genetic.Solver.GeneticProblem)">
            <summary>
            Validates this individual.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="P:Tools.Math.TSP.Genetic.Solver.Individual.Count">
            <summary>
            Returns the number of genomes in this individual.
            </summary>
        </member>
        <member name="T:Tools.Math.TSP.RandomizedArbitraryInsertionSolver">
            <summary>
            Solver that uses RAI to solve instances of the TSP.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.RandomizedArbitraryInsertionSolver._stopped">
            <summary>
            Boolean to stop execution.
            </summary>
        </member>
        <member name="F:Tools.Math.TSP.RandomizedArbitraryInsertionSolver._route">
            <summary>
            The route this solver was initialized with.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.#ctor">
            <summary>
            Creates a new solver.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.#ctor(Tools.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Creates a new solver.
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.Solve(Tools.Math.TSP.Problems.IProblem)">
            <summary>
            Solves the problem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.DoSolve(Tools.Math.TSP.Problems.IProblem,Tools.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Executes the RAI.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.DoSolve(Tools.Math.TSP.RandomizedArbitraryInsertionSolver,Tools.Math.TSP.Problems.IProblem,Tools.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Executes the RAI.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.Stop">
            <summary>
            Stops the solver.
            </summary>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.RaiseIntermidiateResult(System.Int32[],System.Double)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.Name">
            <summary>
            Retuns the name of this solver.
            </summary>
        </member>
        <member name="E:Tools.Math.TSP.RandomizedArbitraryInsertionSolver.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
    </members>
</doc>
