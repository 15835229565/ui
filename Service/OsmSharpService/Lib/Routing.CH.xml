<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Routing.CH</name>
    </assembly>
    <members>
        <member name="T:Routing.CH.Routing.CHPriorityQueue">
            <summary>
            Internal data structure reprenting a visit list,
            </summary>
        </member>
        <member name="F:Routing.CH.Routing.CHPriorityQueue._visit_list">
            <summary>
            Holds all visited vertices sorted by weight.
            </summary>
        </member>
        <member name="F:Routing.CH.Routing.CHPriorityQueue._visited">
            <summary>
            Holds all visited vertices.
            </summary>
        </member>
        <member name="M:Routing.CH.Routing.CHPriorityQueue.#ctor">
            <summary>
            Creates a new visit list.
            </summary>
        </member>
        <member name="M:Routing.CH.Routing.CHPriorityQueue.Push(Routing.Core.Graph.Path.PathSegment{System.Int64})">
            <summary>
            Updates a vertex in this visit list.
            </summary>
            <param name="vertex"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Routing.CH.Routing.CHPriorityQueue.Pop">
            <summary>
            Returns the vertex with the lowest weight and removes it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHPriorityQueue.Peek">
            <summary>
            Returns the vertex with the lowest weight and removes it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHPriorityQueue.PeekWeight">
            <summary>
            Returns the lowest weight.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Routing.CH.Routing.CHPriorityQueue.Count">
            <summary>
            Returns the element count in this list.
            </summary>
        </member>
        <member name="T:Routing.CH.Routing.CHRouter">
            <summary>
            A router for CH.
            </summary>
        </member>
        <member name="F:Routing.CH.Routing.CHRouter._data">
            <summary>
            The CH data.
            </summary>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.#ctor(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Creates a new CH router on the givend data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.Calculate(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList,Routing.Core.Graph.Path.PathSegmentVisitList,System.Double)">
            <summary>
            Calculates the shortest path from the given vertex to the given vertex given the weights in the graph.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateWeight(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList,Routing.Core.Graph.Path.PathSegmentVisitList,System.Double)">
            <summary>
            Calculates the weight of shortest path from the given vertex to the given vertex given the weights in the graph.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateToClosest(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList,Routing.Core.Graph.Path.PathSegmentVisitList[],System.Double)">
            <summary>
            Calculate route to the closest.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateOneToManyWeight(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList,Routing.Core.Graph.Path.PathSegmentVisitList[],System.Double)">
            <summary>
            Calculates all weights from one source to multiple targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateManyToManyWeight(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList[],Routing.Core.Graph.Path.PathSegmentVisitList[],System.Double)">
            <summary>
            Calculates all weights from multiple sources to multiple targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateRange(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList,System.Double)">
            <summary>
            Not supported
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CheckConnectivity(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList,System.Double)">
            <summary>
            Returns true if the search can move beyond the given weight.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.SearchBackwardIntoBucket(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.Dictionary{System.Int64,System.Double}},Routing.Core.Graph.Path.PathSegmentVisitList)">
            <summary>
            Searches backwards and puts the weigths from the to-vertex into the buckets list.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.SearchForwardFromBucket(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.Dictionary{System.Int64,System.Double}},Routing.Core.Graph.Path.PathSegmentVisitList,System.Int64[])">
            <summary>
            Searches forward and uses the bucket to calculate smallest weights.
            </summary>
            <param name="buckets"></param>
            <param name="from"></param>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.DoCalculate(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList,Routing.Core.Graph.Path.PathSegmentVisitList,System.Double,System.Int32,System.Int64)">
            <summary>
            Calculates a shortest path between the two given vertices.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.DoCalculateManyToMany(Routing.Core.Graph.IDynamicGraphReadOnly{Routing.CH.PreProcessing.CHEdgeData},Routing.Core.Interpreter.IRoutingInterpreter,Routing.Core.Graph.Path.PathSegmentVisitList[],Routing.Core.Graph.Path.PathSegmentVisitList[],System.Double,System.Int32)">
            <summary>
            Calculates all shortest paths between the given vertices.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <param name="max_settles"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateWeight(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calculates the weight from from to to.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateWeight(System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Calculates the weight from from to to.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateWeight(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32)">
            <summary>
            Calculates the weight from from to to.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CheckConnectivity(Routing.Core.Graph.Path.PathSegmentVisitList,System.Double)">
            <summary>
            Checks connectivity of a vertex.
            </summary>
            <param name="from"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CheckConnectivity(Routing.Core.Graph.Path.PathSegmentVisitList,System.Int32)">
            <summary>
            Checks connectivity of a vertex.
            </summary>
            <param name="from"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateInternal(System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32)">
            <summary>
            Calculates a shortest path between the two given vertices.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.DoCheckConnectivity(Routing.Core.Graph.Path.PathSegmentVisitList,System.Double,System.Int32)">
            <summary>
            Checks if the given vertex is connected to others.
            </summary>
            <param name="from"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.CalculateBest(Routing.CH.Routing.CHQueue)">
            <summary>
            Test stopping conditions and output the best tentative route.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.SearchForward(Routing.CH.Routing.CHQueue,Routing.CH.Routing.CHPriorityQueue,System.Int64)">
            <summary>
            Do one forward search step.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.SearchBackward(Routing.CH.Routing.CHQueue,Routing.CH.Routing.CHPriorityQueue,System.Int64)">
            <summary>
            Do one backward search step.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.ExpandPath(Routing.Core.Graph.Path.PathSegment{System.Int64})">
            <summary>
            Converts the CH paths to complete paths in the orginal network.
            </summary>
            <param name="forward"></param>
            <param name="backward"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.ConvertArc(Routing.Core.Graph.Path.PathSegment{System.Int64})">
            <summary>
            Converts the given edge and expands it if needed.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.Routing.CHRouter.NotifyPathSegment(Routing.Core.Graph.Path.PathSegment{System.Int64})">
            <summary>
            Notifies the arc.
            </summary>
            <param name="arc"></param>
            <param name="contracted_id"></param>
        </member>
        <member name="P:Routing.CH.Routing.CHRouter.IsCalculateRangeSupported">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="E:Routing.CH.Routing.CHRouter.NotifyPathSegmentEvent">
            <summary>
            The event.
            </summary>
        </member>
        <member name="T:Routing.CH.Routing.CHRouter.CHBest">
            <summary>
            Holds the result.
            </summary>
        </member>
        <member name="P:Routing.CH.Routing.CHRouter.CHBest.VertexId">
            <summary>
            The vertex in the 'middle' of the best route yet.
            </summary>
        </member>
        <member name="P:Routing.CH.Routing.CHRouter.CHBest.Weight">
            <summary>
            The weight of the best route yet.
            </summary>
        </member>
        <member name="T:Routing.CH.Routing.CHRouter.NotifyPathSegmentDelegate">
            <summary>
            The delegate for arc notifications.
            </summary>
            <param name="arc"></param>
            <param name="contracted_id"></param>
        </member>
        <member name="T:Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering">
            <summary>
            Orders the vertices putting the sparse vertices first, any other float.MaxValue.
            
            This should result in a sparser graph without nodes with exactly 2 neighbours.
            </summary>
        </member>
        <member name="T:Routing.CH.PreProcessing.INodeWeightCalculator">
            <summary>
            A weight calculator for the node ordering.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.INodeWeightCalculator.Calculate(System.UInt32)">
            <summary>
            Calculates the weight of the given vertex u.
            </summary>
            <param name="vertex"></param>
            <returns>A estimate of the benefit of contraction, when float.MaxValue the vertex will not be contracted.</returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.INodeWeightCalculator.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering._data">
            <summary>
            Holds the data source.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering.#ctor(Routing.Core.Graph.IDynamicGraph{Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Creates a new sparse ordering calculator.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering.Calculate(System.UInt32)">
            <summary>
            Calculates the ordering.
            </summary>
            <param name="level"></param>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering.NotifyContracted(System.UInt32)">
            <summary>
            Do nothing with this here!
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="T:Routing.CH.PreProcessing.CHPreProcessor">
            <summary>
            Pre-processor to construct a Contraction Hierarchy (CH).
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.CHPreProcessor._target">
            <summary>
            Holds the data target.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.#ctor(Routing.Core.Graph.IDynamicGraph{Routing.CH.PreProcessing.CHEdgeData},Routing.CH.PreProcessing.INodeWeightCalculator,Routing.CH.PreProcessing.INodeWitnessCalculator,System.Int32)">
            <summary>
            Creates a new pre-processor.
            </summary>
            <param name="target"></param>
            <param name="calculator"></param>
            <param name="witness_calculator"></param>
            <param name="max"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.#ctor(Routing.Core.Graph.IDynamicGraph{Routing.CH.PreProcessing.CHEdgeData},Routing.CH.PreProcessing.INodeWeightCalculator,Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new pre-processor.
            </summary>
            <param name="target"></param>
            <param name="calculator"></param>
            <param name="witness_calculator"></param>
        </member>
        <member name="F:Routing.CH.PreProcessing.CHPreProcessor._calculator">
            <summary>
            Holds a weight calculator.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.CHPreProcessor._witness_calculator">
            <summary>
            Holds a witness calculator.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.Start">
            <summary>
            Starts pre-processing all nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.Contract(System.UInt32)">
            <summary>
            Contracts the given vertex.
            </summary>
            <param name="vertex_id"></param>
        </member>
        <member name="F:Routing.CH.PreProcessing.CHPreProcessor._contracted">
            <summary>
            Keeps and array of the contraction status of vertices.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.MarkContracted(System.UInt32)">
            <summary>
            Mark the vertex as contacted.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.IsContracted(System.UInt32)">
            <summary>
            Returns true if the vertex is contracted.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="F:Routing.CH.PreProcessing.CHPreProcessor._queue">
            <summary>
            Holds a queue of contraction priorities.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.CHPreProcessor._all_nodes">
            <summary>
            Enumerates all nodes.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.SelectNext">
            <summary>
            Select the next vertex from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.CanBeContracted(System.UInt32)">
            <summary>
            Returns true if the vertex can be contracted compared to it's neighbours.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.CalculatePriority(System.UInt32)">
            <summary>
            Calculates the priority of the given vertex.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.NotifyArc(System.UInt32,System.UInt32)">
            <summary>
            Notifies a new arc.
            </summary>
            <param name="from_id"></param>
            <param name="to_id"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.CHPreProcessor.NotifyRemove(System.UInt32,System.UInt32)">
            <summary>
            Notifies an arc removal.
            </summary>
            <param name="from_id"></param>
            <param name="to_id"></param>
        </member>
        <member name="E:Routing.CH.PreProcessing.CHPreProcessor.NotifyArcEvent">
            <summary>
            The event.
            </summary>
        </member>
        <member name="E:Routing.CH.PreProcessing.CHPreProcessor.NotifyRemoveEvent">
            <summary>
            The event.
            </summary>
        </member>
        <member name="P:Routing.CH.PreProcessing.CHPreProcessor.NodeWeightCalculator">
            <summary>
            Returns the node weight calculator used by this pre-processor.
            </summary>
        </member>
        <member name="P:Routing.CH.PreProcessing.CHPreProcessor.NodeWitnessCalculator">
            <summary>
            Returns the node witness calculator used by this pre-processor.
            </summary>
        </member>
        <member name="T:Routing.CH.PreProcessing.CHPreProcessor.ArcDelegate">
            <summary>
            The delegate for arc notifications.
            </summary>
            <param name="from_id"></param>
            <param name="to_id"></param>
        </member>
        <member name="T:Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator">
            <summary>
            A simple dykstra witness calculator.
            </summary>
        </member>
        <member name="T:Routing.CH.PreProcessing.INodeWitnessCalculator">
            <summary>
            A witness calculator.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.INodeWitnessCalculator.Exists(System.UInt32,System.UInt32,System.UInt32,System.Single)">
            <summary>
            Return true if a witness exists for the given graph vertex 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="via"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="F:Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator._router">
            <summary>
            Holds the data target.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator._max_settles">
            <summary>
            The max vertices to settle before stopping the witness search.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.#ctor(Routing.Core.Graph.IDynamicGraph{Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Creates a new witness calculator.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.#ctor(Routing.Core.Graph.IDynamicGraph{Routing.CH.PreProcessing.CHEdgeData},System.Int32)">
            <summary>
            Creates a new witness calculator.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.Exists(System.UInt32,System.UInt32,System.UInt32,System.Single)">
            <summary>
            Returns true if the given vertex has a witness calculator.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="via"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="T:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace">
            <summary>
            The edge difference calculator.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._witness_calculator">
            <summary>
            Holds the graph.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._data">
            <summary>
            Holds the data.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._contraction_count">
            <summary>
            Holds the contracted count.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._depth">
            <summary>
            Holds the depth.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace.#ctor(Routing.Core.Graph.IDynamicGraph{Routing.CH.PreProcessing.CHEdgeData},Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new edge difference calculator.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace.Calculate(System.UInt32)">
            <summary>
            Calculates the edge-difference if u would be contracted.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex_id"></param>
        </member>
        <member name="T:Routing.CH.PreProcessing.Ordering.EdgeDifference">
            <summary>
            The edge difference calculator.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifference._witness_calculator">
            <summary>
            Holds the witness calculator.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifference._data">
            <summary>
            Holds the data.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifference.#ctor(Routing.Core.Graph.IDynamicGraph{Routing.CH.PreProcessing.CHEdgeData},Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new edge difference calculator.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifference.Calculate(System.UInt32)">
            <summary>
            Calculates the edge-difference if u would be contracted.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifference.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex_id"></param>
        </member>
        <member name="T:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted">
            <summary>
            The edge difference calculator.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted._witness_calculator">
            <summary>
            Holds the graph.
            </summary>
        </member>
        <member name="F:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted._contraction_count">
            <summary>
            Holds the contracted count.
            </summary>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted.#ctor(Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new edge difference calculator.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted.Calculate(System.UInt32)">
            <summary>
            Calculates the edge-difference if u would be contracted.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex_id"></param>
        </member>
    </members>
</doc>
