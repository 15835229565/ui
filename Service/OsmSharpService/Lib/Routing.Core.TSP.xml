<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Routing.Core.TSP</name>
    </assembly>
    <members>
        <member name="T:Osm.Routing.Core.TSP.Genetic.RouterTSPGenetic`1">
            <summary>
            A TSP router using a genetic algorithm.
            </summary>
            <typeparam name="ResolvedType"></typeparam>
        </member>
        <member name="T:Osm.Routing.Core.TSP.RouterTSP`1">
            <summary>
            Router that calculates TSP solutions.
            </summary>
            <typeparam name="ResolvedType"></typeparam>
        </member>
        <member name="F:Osm.Routing.Core.TSP.RouterTSP`1._router">
            <summary>
            Holds the basic router.
            </summary>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.#ctor(Routing.Core.IRouter{`0})">
            <summary>
            Creates a new TSP router.
            </summary>
            <param name="router"></param>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.CalculateManyToManyWeight(`0[])">
            <summary>
            Calculates a weight matrix for the given array of points.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.CalculateTSP(`0[],System.Int32,System.Boolean)">
            <summary>
            Calculates the shortest route along all given points starting and ending at the given points.
            </summary>
            <param name="points">The points to travel along.</param>
            <param name="first">The point to start from.</param>
            <param name="is_round">Return back to the first point or not.</param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.CalculateTSP(`0[],System.Int32,System.Int32)">
            <summary>
            Calculates the shortest route along all given points starting and ending at the given points.
            </summary>
            <param name="points">The points to travel along.</param>
            <param name="first">The point to start from.</param>
            <param name="last">The point to end at.</param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.CalculateTSP(`0[],System.Boolean)">
            <summary>
            Calcculates the shortest route along all given points.
            </summary>
            <param name="points">The points to travel along.</param>
            <param name="is_round">Make the route a round or not.</param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.CalculateTSP(`0[])">
            <summary>
            Calculates the shortest route along all given points returning back to the first.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.solver_IntermidiateResult(System.Int32[],System.Double)">
            <summary>
            Raise intermidiate result event.
            </summary>
            <param name="result"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.BuildRoute(`0[],Tools.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Builds an OsmSharRoute.
            </summary>
            <param name="points"></param>
            <param name="found_solution"></param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.GenerateProblem(System.Double[][],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Generates a problem definition.
            </summary>
            <param name="weights"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="is_round"></param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.DoCreateSolver">
            <summary>
            Generates a solver.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RouterTSP`1.RaiseIntermidiateResult(System.Int32[],System.Double)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="E:Osm.Routing.Core.TSP.RouterTSP`1.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:Osm.Routing.Core.TSP.RouterTSP`1.IntermidiateDelegate">
            <summary>
            Delegate to pass on an intermidiate solution.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Osm.Routing.Core.TSP.Genetic.RouterTSPGenetic`1.#ctor(Routing.Core.IRouter{`0})">
            <summary>
            Creates a new TSP router;
            </summary>
            <param name="router"></param>
        </member>
        <member name="M:Osm.Routing.Core.TSP.Genetic.RouterTSPGenetic`1.DoCreateSolver">
            <summary>
            Creates a genetic solver.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="T:Osm.Routing.Core.TSP.Genetic.RouterTSPAEXGenetic`1">
            <summary>
            A TSP router using a genetic algorithm.
            </summary>
            <typeparam name="ResolvedType"></typeparam>
        </member>
        <member name="M:Osm.Routing.Core.TSP.Genetic.RouterTSPAEXGenetic`1.#ctor(Routing.Core.IRouter{`0})">
            <summary>
            Creates a new TSP router;
            </summary>
            <param name="router"></param>
        </member>
        <member name="M:Osm.Routing.Core.TSP.Genetic.RouterTSPAEXGenetic`1.DoCreateSolver">
            <summary>
            Creates a genetic solver.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="T:Osm.Routing.Core.TSP.RandomizedArbitraryInsertion.RouteTSPRAI`1">
            <summary>
            A TSP router using a genetic algorithm.
            </summary>
            <typeparam name="ResolvedType"></typeparam>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RandomizedArbitraryInsertion.RouteTSPRAI`1.#ctor(Routing.Core.IRouter{`0})">
            <summary>
            Creates a new TSP router;
            </summary>
            <param name="router"></param>
        </member>
        <member name="M:Osm.Routing.Core.TSP.RandomizedArbitraryInsertion.RouteTSPRAI`1.DoCreateSolver">
            <summary>
            Creates a solver.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
    </members>
</doc>
